package com.football.ua.controller;

import com.football.ua.exception.BadRequestException;
import com.football.ua.exception.NotFoundException;
import com.football.ua.model.News;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/news")
@Tag(name = "üì∞ News", description = "API –¥–ª—è –Ω–æ–≤–∏–Ω (PUBLIC –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, EDITOR –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è)")
public class NewsController {
    private static final Map<Long, News> db = new LinkedHashMap<>();
    private static long idSeq = 1;
    
    private final com.football.ua.service.ActivityLogService activityLogService;
    
    public NewsController(com.football.ua.service.ActivityLogService activityLogService) {
        this.activityLogService = activityLogService;
    }

    @GetMapping
    @Operation(summary = "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏", description = "üåê PUBLIC - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    public List<News> list() { return new ArrayList<>(db.values()); }

    @GetMapping("/{id}")
    @Operation(summary = "–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –∑–∞ ID", description = "üåê PUBLIC - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    public News one(@PathVariable Long id) {
        var n = db.get(id);
        if (n == null) throw new NotFoundException("News not found");
        return n;
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('EDITOR')")
    @Operation(summary = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É", 
               description = "‚úçÔ∏è EDITOR - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ–≤–∏–Ω–∏",
               security = @SecurityRequirement(name = "bearerAuth"))
    public News create(@Valid @RequestBody News body) {
        if (body.title == null || body.content == null)
            throw new BadRequestException("Title and content required");
        body.id = idSeq++; body.likes = 0;
        db.put(body.id, body);
        
        activityLogService.logActivity(
            "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤—É –Ω–æ–≤–∏–Ω—É",
            String.format("\"%s\"", body.title),
            "NEWS"
        );
        
        return body;
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('EDITOR')")
    @Operation(summary = "–û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É", 
               description = "‚úçÔ∏è EDITOR - —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏",
               security = @SecurityRequirement(name = "bearerAuth"))
    public News update(@PathVariable Long id, @Valid @RequestBody News body) {
        var n = db.get(id);
        if (n == null) throw new NotFoundException("News not found");
        n.title = body.title; n.content = body.content;
        
        activityLogService.logActivity(
            "–û–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–Ω—É",
            String.format("–ù–æ–≤–∏–Ω–∞ #%d: \"%s\"", id, body.title),
            "NEWS"
        );
        
        return n;
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('EDITOR')")
    @Operation(summary = "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É", 
               description = "‚úçÔ∏è EDITOR - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏",
               security = @SecurityRequirement(name = "bearerAuth"))
    public void delete(@PathVariable Long id) {
        News removed = db.remove(id);
        if (removed == null) throw new NotFoundException("News not found");
        
        activityLogService.logActivity(
            "–í–∏–¥–∞–ª–µ–Ω–æ –Ω–æ–≤–∏–Ω—É",
            String.format("–ù–æ–≤–∏–Ω–∞ #%d –≤–∏–¥–∞–ª–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º", id),
            "NEWS"
        );
    }

    @PostMapping("/{id}/like")
    @PreAuthorize("hasAnyRole('USER', 'MODERATOR', 'EDITOR')")
    @Operation(summary = "–í–ø–æ–¥–æ–±–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É", 
               description = "üîê AUTHENTICATED - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (USER, MODERATOR, EDITOR)",
               security = @SecurityRequirement(name = "bearerAuth"))
    public News like(@PathVariable Long id) {
        var n = db.get(id);
        if (n == null) throw new NotFoundException("News not found");
        n.likes += 1;
        
        activityLogService.logActivity(
            "–í–ø–æ–¥–æ–±–∞–Ω–æ –Ω–æ–≤–∏–Ω—É",
            String.format("\"%s\" (–≤—Å—å–æ–≥–æ: %d ‚ù§Ô∏è)", n.title, n.likes),
            "NEWS"
        );
        
        return n;
    }
}
