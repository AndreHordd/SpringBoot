package com.football.ua.controller;

import com.football.ua.model.entity.PostEntity;
import com.football.ua.model.entity.TopicEntity;
import com.football.ua.service.AuthorizationService;
import com.football.ua.service.ForumDbService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@RestController
@RequestMapping("/api/forum")
@Tag(name = "üí¨ Forum", description = "API –¥–ª—è —Ñ–æ—Ä—É–º—É (PUBLIC –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è, AUTHENTICATED –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)")
public class ForumController {

    private final ForumDbService forum;
    private final com.football.ua.service.ActivityLogService activityLogService;
    private final AuthorizationService authorizationService;

    public ForumController(ForumDbService forum, 
                          com.football.ua.service.ActivityLogService activityLogService,
                          AuthorizationService authorizationService) {
        this.forum = forum;
        this.activityLogService = activityLogService;
        this.authorizationService = authorizationService;
    }

    @GetMapping("/topics")
    @Operation(summary = "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–µ–º–∏ —Ñ–æ—Ä—É–º—É", 
               description = "üåê PUBLIC - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    public List<TopicEntity> listTopics() {
        return forum.listTopics();
    }

    @PostMapping(value = "/topics", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAnyRole('USER', 'MODERATOR', 'EDITOR')")
    @Operation(summary = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É",
               description = "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–æ–ª—å: USER, MODERATOR –∞–±–æ EDITOR",
               security = @SecurityRequirement(name = "bearerAuth"))
    public TopicEntity createTopic(@RequestBody TopicCreateDto dto, Authentication auth) {
        String author = (auth != null && auth.isAuthenticated()) ? auth.getName() : dto.author();
        TopicEntity topic = forum.createTopic(dto.title(), author);
        
        activityLogService.logActivity(
            "–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Ç–µ–º—É –Ω–∞ —Ñ–æ—Ä—É–º—ñ",
            String.format("\"%s\" –≤—ñ–¥ %s", dto.title(), author),
            "FORUM"
        );
        
        return topic;
    }

    @DeleteMapping("/topics/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–º—É",
               description = "–í–ª–∞—Å–Ω–∏–∫ —Ç–µ–º–∏ –∞–±–æ MODERATOR",
               security = @SecurityRequirement(name = "bearerAuth"))
    public void deleteTopic(@PathVariable Long id, Authentication authentication) {
        if (!forum.topicExists(id)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Topic not found");
        }

        if (!authorizationService.canDeleteTopic(id, authentication)) {
            throw new AccessDeniedException("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü—é —Ç–µ–º—É");
        }
        
        forum.deleteTopic(id);
        
        String action = authorizationService.isModeratorOrHigher(authentication) 
            ? "–≤–∏–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º" 
            : "–≤–∏–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º";
        
        activityLogService.logActivity(
            "–í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ–º—É –∑ —Ñ–æ—Ä—É–º—É",
            String.format("–¢–µ–º–∞ #%d %s", id, action),
            "FORUM"
        );
    }

    @GetMapping("/topics/{topicId}/posts")
    public List<PostEntity> listPosts(@PathVariable Long topicId) {
        if (!forum.topicExists(topicId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Topic not found");
        }
        return forum.listPosts(topicId);
    }


    @PostMapping(value = "/topics/{topicId}/posts", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAnyRole('USER', 'MODERATOR', 'EDITOR')")
    public PostEntity addPost(@PathVariable Long topicId, @RequestBody PostCreateDto dto, Authentication auth) {
        if (!forum.topicExists(topicId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Topic not found");
        }
        String author = (auth != null && auth.isAuthenticated()) ? auth.getName() : dto.author();
        PostEntity post = forum.addPost(topicId, author, dto.text());
        
        activityLogService.logActivity(
            "–î–æ–¥–∞–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ —Ñ–æ—Ä—É–º—ñ",
            String.format("%s –∑–∞–ª–∏—à–∏–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä —É —Ç–µ–º—ñ #%d", author, topicId),
            "FORUM"
        );
        
        return post;
    }

    @DeleteMapping("/topics/{topicId}/posts/{postId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç", 
               description = "üîê AUTHENTICATED - –≤–ª–∞—Å–Ω–∏–∫ –ø–æ—Å—Ç–∞ –∞–±–æ üëÆ MODERATOR",
               security = @SecurityRequirement(name = "bearerAuth"))
    public void deletePost(@PathVariable Long topicId, @PathVariable Long postId, Authentication authentication) {
        if (!forum.topicExists(topicId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Topic not found");
        }

        if (!authorizationService.canDeletePost(postId, authentication)) {
            throw new AccessDeniedException("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü–µ–π –ø–æ—Å—Ç");
        }
        
        forum.deletePost(postId);
        
        String action = authorizationService.isModeratorOrHigher(authentication) 
            ? "–≤–∏–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º" 
            : "–≤–∏–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º";
        
        activityLogService.logActivity(
            "–í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ —Ñ–æ—Ä—É–º—É",
            String.format("–ü–æ—Å—Ç #%d –∑ —Ç–µ–º–∏ #%d %s", postId, topicId, action),
            "FORUM"
        );
    }

    public record TopicCreateDto(String title, String author) {}
    public record PostCreateDto(String author, String text) {}
}
